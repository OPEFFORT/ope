{"version":3,"file":"lib_index_js.ca4bc982440de9ab6d84.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAuD;AACkB;AACxB;AACV;AACvC,YAAY,kCAAkC;AAC9C,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA,iDAAiD,WAAW,mBAAmB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe,EAAE,kEAAgB,EAAE,2DAAS;AAC3D;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA,gBAAgB,6EAA2B;AAC3C,gBAAgB,gFAA8B;AAC9C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,gCAAgC,iDAAI,GAAG,UAAU;AACjD;AACA,8BAA8B,qBAAqB;AACnD,kCAAkC,iDAAI,GAAG,UAAU;AACnD;AACA,gCAAgC,6BAA6B;AAC7D,gCAAgC,2BAA2B;AAC3D,gCAAgC,uCAAuC;AACvE,gCAAgC,uCAAuC;AACvE,gCAAgC,iCAAiC;AACjE,gCAAgC,+BAA+B;AAC/D,gCAAgC,kCAAkC;AAClE,gCAAgC,6BAA6B;AAC7D,8BAA8B,yCAAyC;AACvE,wCAAwC,WAAW;AACnD;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://slide_layout/./lib/index.js"],"sourcesContent":["import { ICommandPalette } from '@jupyterlab/apputils';\nimport { INotebookTracker, NotebookActions } from '@jupyterlab/notebook';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { Menu } from '@lumino/widgets';\n// import { ICommandPalette, MainAreaWidget } from '@jupyterlab/apputils';\n// import { Widget } from '@lumino/widgets';\n/**\n * Initialization data for the slide_layout extension.\n */\nconst slideTypes = ['slide', 'subslide', 'fragment', 'skip', 'notes'];\nfunction setCellSlide(cell, value) {\n    if (cell) {\n        let data = cell.model.metadata.get('slideshow') || Object.create(null);\n        if (value === null || !slideTypes.includes(value)) {\n            // Make a shallow copy so we aren't modifying the original metadata.\n            data = Object.assign({}, data);\n            delete data.slide_type;\n        }\n        else {\n            data = Object.assign(Object.assign({}, data), { slide_type: value });\n        }\n        cell.model.metadata.set('slideshow', data);\n    }\n}\nconst plugin = {\n    id: 'slide_layout:plugin',\n    autoStart: true,\n    requires: [ICommandPalette, INotebookTracker, IMainMenu],\n    activate: (app, palette, tracker, mainMenu) => {\n        console.log('JupyterLab extension slide_layout is activated!');\n        const { commands } = app;\n        commands.addCommand('openLink', {\n            label: 'Documentation',\n            caption: 'Documentation',\n            execute: () => {\n                const win = window.open('https://jupyterlab.readthedocs.io/en/stable/', '_blank');\n                win === null || win === void 0 ? void 0 : win.focus();\n            }\n        });\n        commands.addCommand('createBlankSlide', {\n            label: 'Blank Slide',\n            caption: 'Blank Slide',\n            execute: () => {\n                const current = tracker.currentWidget;\n                const notebook = current.content;\n                // add a dividing line\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                let activeCell = notebook.activeCell;\n                activeCell.model.value.text = '<hr>';\n                setCellSlide(activeCell, 'skip');\n                // add a body label\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text = '**BODY**';\n                //set cell slidetype to skip\n                setCellSlide(activeCell, 'skip');\n                // add a BODY cell\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                //set cell slidetype to slide to display as a new slide\n                setCellSlide(activeCell, 'slide');\n                // add a NOTE label\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text = '**NOTE**';\n                setCellSlide(activeCell, 'skip');\n                // add a NOTE cell\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text = '- a Note that will display in the notes view';\n                setCellSlide(activeCell, 'notes');\n            }\n        });\n        commands.addCommand('imageOnlySlide', {\n            label: 'Image only',\n            caption: 'Image only',\n            execute: () => {\n                const current = tracker.currentWidget;\n                const notebook = current.content;\n                // add a dividing line\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                let activeCell = notebook.activeCell;\n                activeCell.model.value.text = '<hr>';\n                setCellSlide(activeCell, 'skip');\n                // add a body label\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text = '**Image Only**';\n                //set cell slidetype to skip\n                setCellSlide(activeCell, 'skip');\n                // add a IMAGE cell\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text = '<img src=\"../images/default.png\" width = \"100%\">';\n                //set cell slidetype to slide to display as a new slide\n                setCellSlide(activeCell, 'slide');\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text = '**NOTE**';\n                setCellSlide(activeCell, 'skip');\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text =\n                    '- Using % of slide to scale the image';\n                setCellSlide(activeCell, 'notes');\n            }\n        });\n        commands.addCommand('leftBulletsRightImageSlide', {\n            label: 'Left Bullets Right Image',\n            caption: 'Left Bullets Right Image',\n            execute: () => {\n                const current = tracker.currentWidget;\n                const notebook = current.content;\n                // add a dividing line\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                let activeCell = notebook.activeCell;\n                activeCell.model.value.text = '<hr>';\n                setCellSlide(activeCell, 'skip');\n                // add a body label\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text = '# Title';\n                //set cell slidetype to slide to display as a new slide\n                setCellSlide(activeCell, 'slide');\n                // add a BODY cell\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text = '<table>\\n \\\n        <tr>\\n \\\n          <td> <ul> <li> Bullet 1 : Something keypoints, and a long description </li> \\n \\\n                    <li> Bullet 2 : Something keypoints, and a long description </li> </ul> </td>\\n \\\n          <td> <img src=\"../images/default.png\" width = \"100%\">\\n \\\n        </tr>\\n \\\n        </table>';\n                // add a BODY cell\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text = 'Closing Comment';\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text = '**NOTE**';\n                setCellSlide(activeCell, 'skip');\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text =\n                    '- Using % of slide to scale the image';\n                setCellSlide(activeCell, 'notes');\n            }\n        });\n        commands.addCommand('leftImageRightBulletsSlide', {\n            label: 'Left Image Right Bullets ',\n            caption: 'Left Image Right Bullets',\n            execute: () => {\n                const current = tracker.currentWidget;\n                const notebook = current.content;\n                // add a dividing line\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                let activeCell = notebook.activeCell;\n                activeCell.model.value.text = '<hr>';\n                setCellSlide(activeCell, 'skip');\n                // add a body label\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text = '# Title';\n                //set cell slidetype to slide to display as a new slide\n                setCellSlide(activeCell, 'slide');\n                // add a BODY cell\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text = '<table>\\n \\\n        <tr>\\n \\\n          <td> <img src=\"../images/default.png\" width = \"100%\">\\n \\\n          <td> <ul> <li> Bullet 1 : Something keypoints, and a long description </li> \\n \\\n                    <li> Bullet 2 : Something keypoints, and a long description </li> </ul> </td>\\n \\\n        </tr>\\n \\\n        </table>';\n                // add a BODY cell\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text = 'Closing Comment';\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text = '**NOTE**';\n                setCellSlide(activeCell, 'skip');\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text =\n                    '- Using % of slide to scale the image';\n                setCellSlide(activeCell, 'notes');\n            }\n        });\n        commands.addCommand('twoColumnImagesSlide', {\n            label: 'Two Column Images',\n            caption: 'Two Column Images',\n            execute: () => {\n                const current = tracker.currentWidget;\n                const notebook = current.content;\n                // add a dividing line\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                let activeCell = notebook.activeCell;\n                activeCell.model.value.text = '<hr>';\n                setCellSlide(activeCell, 'skip');\n                // add a TITLE label\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text = '# Title';\n                //set cell slidetype to slide to display as a new slide\n                setCellSlide(activeCell, 'slide');\n                // add a two-column table cell for images\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text = '<table>\\n \\\n        <tr>\\n \\\n          <td> <img src=\"../images/default.png\" width = \"100%\">\\n \\\n          <td> <img src=\"../images/default.png\" width = \"100%\">\\n \\\n        </tr>\\n \\\n        </table>';\n                // add a BODY cell\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text = 'Closing Comment';\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text = '**NOTE**';\n                setCellSlide(activeCell, 'skip');\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text =\n                    '- Using % of slide to scale the image';\n                setCellSlide(activeCell, 'notes');\n            }\n        });\n        commands.addCommand('createBulletsSlide', {\n            label: 'Bullets Slide',\n            caption: 'Bullets Slide',\n            execute: () => {\n                const current = tracker.currentWidget;\n                const notebook = current.content;\n                // add a dividing line\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                let activeCell = notebook.activeCell;\n                activeCell.model.value.text = '<hr>';\n                setCellSlide(activeCell, 'skip');\n                // add a body label\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text = '# Title';\n                //set cell slidetype to slide to display as a new slide\n                setCellSlide(activeCell, 'slide');\n                // add a BODY cell\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text = '- **Bullet 1:** Something keypoints, and a long description \\n - **Bullet 2:** Something keypoints, and a long description \\n - **Bullet 3:** Something keypoints, and a long description \\n  - **Bullet 4:** Something keypoints, and a long description';\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text = '**NOTE**';\n                setCellSlide(activeCell, 'skip');\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text =\n                    '- a Note that will display in the notes view';\n                setCellSlide(activeCell, 'notes');\n            }\n        });\n        commands.addCommand('twoColumnBulletsSlide', {\n            label: 'Two Column Bullets',\n            caption: 'Two Column Bullets',\n            execute: () => {\n                const current = tracker.currentWidget;\n                const notebook = current.content;\n                // add a dividing line\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                let activeCell = notebook.activeCell;\n                activeCell.model.value.text = '<hr>';\n                setCellSlide(activeCell, 'skip');\n                // add a body label\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text = '# Title';\n                //set cell slidetype to slide to display as a new slide\n                setCellSlide(activeCell, 'slide');\n                // add a BODY cell\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text = '<table>\\n \\\n        <tr>\\n \\\n          <td> <ul> <li> Bullet 1.1 : Something keypoints, and a long description </li> \\n \\\n                    <li> Bullet 2.1 : Something keypoints, and a long description </li> </ul> </td>\\n \\\n          <td> <ul> <li> Bullet 1.2 : Something keypoints, and a long description </li> \\n \\\n                    <li> Bullet 2.2 : Something keypoints, and a long description </li> </ul></td>\\n \\\n        </tr>\\n \\\n        </table>';\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text = '**NOTE**';\n                setCellSlide(activeCell, 'skip');\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text =\n                    '- a Note that will display in the notes view';\n                setCellSlide(activeCell, 'notes');\n            }\n        });\n        commands.addCommand('createTitleSlide', {\n            label: 'Title Slide',\n            caption: 'Title Slide',\n            execute: () => {\n                const current = tracker.currentWidget;\n                const notebook = current.content;\n                // add a dividing line\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                let activeCell = notebook.activeCell;\n                activeCell.model.value.text = '<hr>';\n                setCellSlide(activeCell, 'skip');\n                // add a body label\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text = '# Title';\n                //set cell slidetype to slide to display as a new slide\n                setCellSlide(activeCell, 'slide');\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text = '**NOTE**';\n                setCellSlide(activeCell, 'skip');\n                NotebookActions.insertBelow(notebook);\n                NotebookActions.changeCellType(notebook, 'markdown');\n                activeCell = notebook.activeCell;\n                activeCell.model.value.text =\n                    '- a Note that will display in the notes view';\n                setCellSlide(activeCell, 'notes');\n            }\n        });\n        const snippetMenu = new Menu({ commands });\n        snippetMenu.title.label = 'Slides';\n        snippetMenu.addItem({ command: 'openLink' });\n        const layoutSubMenu = new Menu({ commands });\n        layoutSubMenu.title.label = 'Layout';\n        layoutSubMenu.addItem({ command: 'createBlankSlide' });\n        layoutSubMenu.addItem({ command: 'imageOnlySlide' });\n        layoutSubMenu.addItem({ command: 'leftBulletsRightImageSlide' });\n        layoutSubMenu.addItem({ command: 'leftImageRightBulletsSlide' });\n        layoutSubMenu.addItem({ command: 'twoColumnImagesSlide' });\n        layoutSubMenu.addItem({ command: 'createBulletsSlide' });\n        layoutSubMenu.addItem({ command: 'twoColumnBulletsSlide' });\n        layoutSubMenu.addItem({ command: 'createTitleSlide' });\n        snippetMenu.addItem({ type: 'submenu', submenu: layoutSubMenu });\n        mainMenu.addMenu(snippetMenu, { rank: 300 });\n    }\n};\nexport default plugin;\n"],"names":[],"sourceRoot":""}