#!/bin/bash
#set -x
# Copyright (C) 2022 by Jonathan Appavoo, Boston University
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Services information
# --------------------

# REPO Services
REPO_CMD="git"
INIT="init"
REMOTE_ADD="remote add"
CLONE="clone"
PULL="pull"
PUSH="push"
PUSH_FIRST="push -f -u"
SWITCH_BRANCH="checkout"
CREATE_BRANCH="checkout -b"
IGNORE_FILE=".gitignore"
RENAME_BRANCH="branch -m"
FETCH="fetch"
ADD="add"
COMMIT="commit -m"
CURRENT_BRANCH="branch --show-current"
REBASE="rebase"
REPO_URL="git@github.com:\${ORG_NAME}/\${REPO_NAME}.git"


# email services
EMAIL_SERVICE="gmail"

# OPE INFORMATION
# --------------------
OPE_ORG_NAME="like101101"
OPE_REPO_NAME="ope"
OPE_CONFIG_DIR="opeconfig"
UPSTREAM_BRANCHES=("main" "coursecontenttemplate" "Documentation")

# --------- Script begins here -------------

# Script Configuration
HEADER="[OPE] "
VERBOSE=0
# Color Configuration
Color_Off='\033[0m'       # Text Reset
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White
Grey='\033[0;37m'         # Grey
BBlack='\033[1;30m'       # Bold Black
BCyan='\033[1;36m'        # Bold Cyan
BGreen='\033[1;32m'

# Helper functions
rolling_output () {
    input=$(cat <&0 | tr '\r' '\n')
    if [[ $VERBOSE -eq 0 ]]; then
        echo $input | while read line; do echo -ne "\033[2K\r"; printf "     ${Grey}$line${Color_Off}\r"; done
    else
        cat <&0
    fi
}

function create
#DESCRIPTION: create a new book organization from the ope template
{
    name=$1

    # Help message
    if [[ -z $name || $name = '-h' ]]; then
        echo "Usage:  ${0##*/} create <bookName>"
        echo "   create an organization using ope template of the name specified"
        echo "   eg. ope create MyBook"
        echo "   will create a new local repository seeded from the ope "
        echo "   template.  See the ope gettings started doc for more info."
        return -1
    fi

    # Check if the organization already exists locally
    if [[ -d $name ]]; then
        printf "$HEADER${Red}ERROR: Organization $name already exists${Color_Off}\n"
        return -1
    fi

    # Create the organization
    mkdir -p $name
    # Creating configuration
    printf "$HEADER${Cyan}Creating OPE configurations${Color_Off}\n"
    touch $IGNORE_FILE
    echo $OPE_CONFIG_DIR >> $IGNORE_FILE
    mkdir -p $OPE_CONFIG_DIR

    cd $name
    
    read -r -p "    Enter the email of the ${name} orginzation: " user_input
    if [ -z "$user_input" ]; then
        echo "${name}@${EMAIL_SERVICE}.com" > ../$OPE_CONFIG_DIR/email
        printf "    The email was set to default value: ${BBlack}${name}@${EMAIL_SERVICE}.com${Color_Off}\n"
    else
        echo $user_input > ../$OPE_CONFIG_DIR/email
        printf "    The email was set to: ${BBlack}${user_input}${Color_Off}\n"
    fi


    read -r -p "    Enter the source URL of the ${name} orginzation: " user_input
    if [ -z "$user_input" ]; then
        ORG_NAME="${name}"
        REPO_NAME="${name}"
        eval "NEW_REPO_URL=$REPO_URL"
    else
        NEW_REPO_URL=$user_input  
    fi
    echo $NEW_REPO_URL > ../$OPE_CONFIG_DIR/source_url
    printf "    The ${name} source URL was set to: ${BBlack}${NEW_REPO_URL}${Color_Off}\n"

    # Creating the organization
    while true; do
        read -r -p "    Are you building on top of an existing OPE book? [Y/n]: " user_input
        if [ -z "$user_input" ]; then
            user_input="n"
            break;
        elif [ "$user_input" == "n" ]; then
            break;
        elif [ "$user_input" == "Y" ]; then
            break;
        else
            printf "    ${Red}ERROR: Invalid input. Please enter Y/n ${Color_Off}\n"
        fi
    done

    if [ "$user_input" == "n" ]; then
        printf "$HEADER${Cyan}Seeding from OPE content template${Color_Off}\n"
        ${REPO_CMD} ${INIT} | while read line; do printf "     ${Grey}$line${Color_Off}\r"; done && 
        ORG_NAME="${OPE_ORG_NAME}"
        REPO_NAME="${OPE_REPO_NAME}"
        eval "OPE_REPO_URL=$REPO_URL"
    else
        printf "$HEADER${Cyan}Seeding from existing book content template${Color_Off}\n"
        while true; do
            read -r -p "    Enter the OPE source URL of the existing book: " user_input
            if [ -z "$user_input" ]; then
                printf "    ${Red}ERROR: Invalid input. Please try again${Color_Off}\n"
            else
                break;
            fi
        done
        ${REPO_CMD} ${INIT} # | rolling_output
        OPE_REPO_URL=$user_input
    fi

    # Adding the remotes
    ${REPO_CMD} ${REMOTE_ADD} upstream ${OPE_REPO_URL} # | rolling_output #0<&0
    ${REPO_CMD} ${REMOTE_ADD} origin ${NEW_REPO_URL} # | rolling_output #0<&0

    for branch in "${UPSTREAM_BRANCHES[@]}"; do
        ${REPO_CMD} ${FETCH} upstream ${branch} 2>&1  # | rolling_output #0<&0 #| while read line; do echo -ne "\033[2K\r"; printf "    ${Grey}$line${Color_Off}\r"; done 
        ${REPO_CMD} ${SWITCH_BRANCH} ${branch}  2>&1  # | rolling_output #0<&0 #| while read line; do echo -ne "\033[2K\r"; printf "    ${Grey}$line${Color_Off}\r"; done
        ${REPO_CMD} ${RENAME_BRANCH} ${branch}-source  2>&1  # | rolling_output #0<&0 #| while read line; do echo -ne "\033[2K\r"; printf "    ${Grey}$line${Color_Off}\r"; done
        ${REPO_CMD} ${CREATE_BRANCH} ${branch}  2>&1  # | rolling_output #0<&0 #| while read line; do echo -ne "\033[2K\r"; printf "    ${Grey}$line${Color_Off}\r"; done
        ${REPO_CMD} ${PUSH_FIRST} origin ${branch} 2>&1 # | rolling_output #0<&0
    done

    ${REPO_CMD} ${SWITCH_BRANCH} ${UPSTREAM_BRANCHES[0]}  2>&1  # # | rolling_output
    echo -ne "\033[2K\r"
    printf "$HEADER${Cyan}Initilal Commit to ${name} repository.${Color_Off}\n"
    mv ../$IGNORE_FILE .
    mv ../$OPE_CONFIG_DIR .
    ${REPO_CMD} ${ADD} . #2>&1 # | rolling_output
    ${REPO_CMD} ${COMMIT} "Initial commit from the ope command line tool" 2>&1 ## | rolling_output
    ${REPO_CMD} ${PUSH} 2>&1 ## | rolling_output
    printf "$HEADER${Green}OPE book organization has been successfully created ${Color_Off}\n"    
}

function update
#DESCRIPTION: update the ope framework
{
    name=$1
    if [[ -z $name || $name = '-h' ]]; then
	    echo "Usage:  ${0##*/} update <book_name> "
        echo "  update the book repository with the latest changes from the OPE framework"
        echo "  note that this will be a rebase operation based on the branch"
        echo "  that you are currently on"
        echo "  make sure you are on the right branch and save all your changes"
	return -1
    fi

    if [[ ! -d $name ]]; then
        printf "$HEADER${Red}ERROR: Organization $name does not exist.${Color_Off}\n"
        return -1
    fi

    cd $name
    current_branch=$(${REPO_CMD} ${CURRENT_BRANCH})
    printf "$HEADER${Cyan}Updating the book repository on ${Color_Off}${BCyan}${current_branch}${Color_Off}\n"
    ${REPO_CMD} ${SWITCH_BRANCH} ${current_branch}-source
    ${REPO_CMD} ${PULL} upstream ${current_branch}
    ${REPO_CMD} ${SWITCH_BRANCH} ${current_branch}
    ${REPO_CMD} ${REBASE} ${current_branch}-source
    printf "$HEADER${BGreen}${current_branch}${Color_Off}${Green} has been successfully updated ${Color_Off}\n"


}

function build
#DESCRIPTION: build the book
{
    arg=$1
    name=$2
    if [[ -z $arg || $arg = '-h' ]]; then
	    echo "Usage: ope build <book_name>"
	    return -1
    fi

    if [[ ! -d $arg ]]; then
        printf "$HEADER${Red}ERROR: Organization $args does not exist.${Color_Off}\n"
        return -1
    fi

    cd $arg
    printf "$HEADER${Cyan}Building the book${Color_Off}\n"
    ${REPO_CMD} ${SWITCH_BRANCH} ${UPSTREAM_BRANCHES[1]}
    make build
    printf "$HEADER${Green}Book has been successfully built ${Color_Off}\n"
}

function pub
#DESCRIPTION: publish the book
{
    arg=$1
    if [[ -z $arg || $arg = '-h' ]]; then
    echo "Usage: pub"
    return -1
    fi    
}

print_func_page()
{
    func_names=($(grep '^function' $0 | awk '{print $2}'))
    grep '^#DESCRIPTION' $0 | awk -F: '{print $2}' | while read line ; do printf "  ${Blue}${func_names[$i]}${Color_Off}, $line\n"; i=$((i+1)); done | column -t -s,
}

Usage()
{
    echo 
    echo "Usage:  ${0##*/} FUNCTION {ARGS} " >&2
    echo
    echo "A command-line tool for building open source infrastructures using ope framework"
    echo 
    echo "Functions: "
    print_func_page
    echo
    echo "for each func use '-h' to print its Usage: eg. ${0##*/} dump -h"
    echo "will print the Usage for the dump command"
}




process_args()
{
  if [[ $# == 0 || $1 = '-h' ]]
  then
    Usage
    exit -1
  fi

  dofunc=$1
}

set -e
set -o pipefail

process_args "$@"
shift

$dofunc "$@"

exit $?
